{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"home","text":""},{"location":"#xidp","title":"xidp","text":"<p>Xi(\\(\\Xi\\)) Data Pipeline</p> <p>When doing data analysis, a lot of the times we are trying to build up tables of data. Although to do calculation for one metric, the code is should not be very complex and hard to manage, when it comes to hundreds of metrics, the logic may be convoluted. We are aiming to build a tool to define a better way to implement this process of constructing data tables by providing below features: 1. Automatic dependency resolution after register a component and all its dependency components. 2. Pre and Post validation for a component, pre validation for dependencies and post validation for component itself. 3. Dependency graph to visualise how a component is calculated. 4. CLI tools to adjust configuration and call on API functions. 5. GUI(Still not decided if this will be implemented) for pipeline progress monitoring.</p> <ul> <li>Free software: MIT</li> <li>Documentation: https://napxi.github.io/xidp/</li> <li>Alternative Documentation: https://napxi.github.io/xidp-doc/</li> </ul>"},{"location":"#features","title":"Features","text":"<ol> <li>Automatic dependency resolution after register a component and all its dependency components.</li> <li>Pre and Post validation for a component, pre validation for dependencies and post validation for component itself.</li> <li> <p>Dependency graph to visualise how a component is calculated. Below is an example of showing how F is calculated:  <pre><code>graph TD\n    7(D) &amp; 8(E) -.-&gt; 6{sum}\n    6{sum} --&gt; 9(F)\n    1(A) -.-&gt; 4{exp}\n    4{exp} --&gt; 7(D)\n    0(table) -.-&gt; 100{identity}\n    100{identity} --&gt; 1(A)\n    2(B) &amp; 3(C) -.-&gt; 5{product}\n    5{product} --&gt; 8(E)\n    100{identity} --&gt; 2(B)\n    100{identity} --&gt; 3(C)</code></pre> </p> </li> <li> <p>CLI tools to adjust configuration and call on API functions.</p> </li> <li>GUI(Still not decided if this will be implemented) for pipeline progress monitoring.</li> </ol>"},{"location":"authors/","title":"authors","text":""},{"location":"authors/#credits","title":"Credits","text":""},{"location":"authors/#development-lead","title":"Development Lead","text":"<ul> <li>xliu xlatom1009@gmail.com</li> </ul>"},{"location":"authors/#contributors","title":"Contributors","text":"<p>None yet. Why not be the first?</p>"},{"location":"builder/","title":"builder","text":"<p>               Bases: <code>BuilderBase</code>, <code>Generic[ComponentType]</code></p> <p>Builder defines how a component is build from its dependencies</p>"},{"location":"component/","title":"component","text":"<p>               Bases: <code>ComponentBase</code></p> <p>A component defines a transformation. Components must contain 3 fields - dependencies: a list of components where components can have type               of Components of str. - builder: a Builder type that defines how to build the components based on            dependencies - version: defines components version. It has a default value of DEFAULT.</p>"},{"location":"component/#xidp.base.base.Component.all_level_dependencies","title":"<code>all_level_dependencies()</code>","text":"<p>Retrieve all level dependencies for the current object.</p> <p>This method collects all dependencies recursively from the direct dependencies of the current object and returns them as a tuple.</p> <p>Returns:</p> <ul> <li> <code>tuple[Self, ...]</code>           \u2013            <p>tuple[Self, ...]: A tuple containing all level dependencies,       including direct dependencies and their       respective dependencies.</p> </li> </ul>"},{"location":"component/#xidp.base.base.Component.dependents_on","title":"<code>dependents_on(component)</code>","text":"<p>Determine if the current component depends on the given component, either directly or indirectly.</p> <p>Parameters:</p> <ul> <li> <code>component</code>               (<code>Self</code>)           \u2013            <p>The component to check for dependency.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the current component depends on the given component,</p> </li> <li> <code>bool</code>           \u2013            <p>False otherwise.</p> </li> </ul>"},{"location":"component/#xidp.base.base.Component.directly_dependents_on","title":"<code>directly_dependents_on(component)</code>","text":"<p>Check if the given component is a direct dependency of the current component.</p> <p>Parameters:</p> <ul> <li> <code>component</code>               (<code>Self</code>)           \u2013            <p>The component to check for direct dependency.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the given component is a direct dependency,</p> </li> <li> <code>bool</code>           \u2013            <p>False otherwise.</p> </li> </ul>"},{"location":"contributing/","title":"contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/napxi/xidp/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>xidp could always use more documentation, whether as part of the official xidp docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/napxi/xidp/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>xidp</code> for local development.</p> <ol> <li>Fork the <code>xidp</code> repo on GitHub.</li> <li>Clone your fork locally</li> </ol> <pre><code>    $ git clone git@github.com:your_name_here/xidp.git\n</code></pre> <ol> <li>Ensure poetry is installed.</li> <li>Install dependencies and start your virtualenv:</li> </ol> <pre><code>    $ poetry install -E test -E doc -E dev\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>    $ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> <ol> <li>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</li> </ol> <pre><code>    $ tox\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>    $ git add .\n    $ git commit -m \"Your detailed description of your changes.\"\n    $ git push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.11, 3.12 and for PyPy. Check    https://github.com/napxi/xidp/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips```","text":"<pre><code>$ pytest tests.test_xidp\n</code></pre> <p>```To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run:</p> <pre><code>$ poetry patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>Github Actions will then deploy to PyPI if tests pass.</p>"},{"location":"history/","title":"history","text":""},{"location":"history/#history","title":"History","text":""},{"location":"history/#010-2024-10-13","title":"0.1.0 (2024-10-13)","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"installation/","title":"installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install xidp, run this command in your terminal:</p> <pre><code>pip install xidp\n</code></pre> <p>This is the preferred method to install xidp, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for xidp can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone git://github.com/napxi/xidp\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/napxi/xidp/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>pip install .\n</code></pre>"},{"location":"usage/","title":"usage","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>To use xidp in a project</p> <pre><code>    import xidp\n</code></pre>"}]}